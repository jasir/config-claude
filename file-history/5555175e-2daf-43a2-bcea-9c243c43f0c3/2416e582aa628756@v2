# git-compose

TypeScript CLI tool for managing multiple Git repositories as defined in a YAML configuration file.

## ðŸ“š Documentation

**â†’ [Full Documentation](doc/index.md)**

- [Quick Start](doc/quick-start.md) - Get started in 5 minutes
- [Installation](doc/installation.md) - Detailed installation guide
- [Usage](doc/usage.md) - Complete command reference
- [Troubleshooting](doc/troubleshooting.md) - Common issues and solutions
- [Developer Guide](doc/developer.md) - For contributors

## Version

1.0.0

## Quick Installation

To use `git-compose` from anywhere on your system, create a symbolic link to the git-compose script:

```bash
sudo ln -s /path/to/your/git-composer/git-compose /usr/local/bin/git-compose
```

For example, if your project is in `/c/work/projects/git-composer`:

```bash
sudo ln -s /c/work/projects/git-composer/git-compose /usr/local/bin/git-compose
```

After installation, you can use `git-compose` from any directory.

## Usage

`git-compose` is a command-line tool designed to manage multiple Git repositories as defined in a configuration file.

### How to Use

1. **Configuration File**: Create a `.git-compose.yaml` file in your project directory or specify a custom path using the `--config` option. The configuration file should define the target directory and the repositories to be cloned or checked out.

2. **Run the Tool**: Execute the tool using the command:

   ```bash
   git-compose --config <path_to_config>
   ```

   If no config path is specified, it will look for `.git-compose.yaml` in the current directory.

3. **Available Commands**:
   - **Build Repositories**: To build the repositories, use:

     ```bash
     git-compose build [--rebuild] [--shallow] [--convert-paths] [--target <path>]
     ```

     - `--rebuild`: Deletes existing git directories before building.
     - `--shallow`: Clones repositories with `--depth 1`.
     - `--convert-paths`: Enables automatic path format conversion between Windows and Unix formats.
     - `--target <path>`: Override target directory from config file.

   - **Status**: Display repository information from configuration file:

     ```bash
     git-compose status
     ```

     This command shows a table with information about all repositories defined in the configuration file, including their paths, branches, and remote origins.

   - **Execute Command**: To execute a command in all repositories, use:

     ```bash
     git-compose exec <cmd> [--convert-paths] [--target <path>]
     ```

   - **Add Repository**: To add an existing Git repository to your configuration file, use:

     ```bash
     git-compose add <repo_path>
     ```

     This command will:
     - Analyze the Git repository at the specified path
     - Detect the current branch and remote origin URL
     - Calculate the relative path from the target directory
     - Add the repository to your `.git-compose.yaml` configuration file
     - Check for duplicates to prevent adding the same repository twice

   - **Extract Repository**: To extract a subdirectory from a repository into a new standalone repository with filtered history, use:

     ```bash
     git-compose extract <source-repo-path> <target-directory-path> [options]
     ```

     Options:
     - `--dry-run`: Show what would be done without executing
     - `--branch <name>`: Which branch to extract (default: current)
     - `--init-remote <url>`: Create GitHub repo and set remote (or use existing repo)
     - `--push`: Push after extraction (requires --init-remote)
     - `--force`: Overwrite existing .git in target directory
     - `--verbose`: Detailed output

     **GitHub Remote Setup**: If the GitHub repository already exists, `--init-remote` will automatically set up the remote origin and push if `--push` is specified. Supports multiple URL formats:
     - Repo name only: `--init-remote "my-repo"`
     - User/repo format: `--init-remote "username/my-repo"`
     - Full URL: `--init-remote "https://github.com/username/my-repo.git"`

   - **Commit Changes**: Commit changes in all repositories using an interactive process:

     ```bash
     git-compose commit
     ```

     This command will:
     - Check each repository for uncommitted changes
     - Show the status and diff for repositories with changes
     - Provide an interactive prompt to commit changes with a custom message
     - Allow you to skip repositories or quit the process

   - **Pull Repositories**: Pull (with rebase) all repositories from their remote origins, but only if needed:

     ```bash
     git-compose pull [--verbose]
     ```

   - **Push Repositories**: Push all repositories to their remote origins, but only if needed:

     ```bash
     git-compose push [--verbose]
     ```

   - **Sync Repositories**: Synchronize all repositories by handling pulls, commits, and pushes:

     ```bash
     git-compose sync [--verbose] [--no-commit]
     ```

     The `--no-commit` option will automatically skip repositories that have uncommitted changes, only processing clean repositories that can be safely pulled and pushed.

     When a repository has uncommitted changes, the sync command will:
     - Show the status and diff of the repository
     - Provide an interactive menu with the following options:
       - `!` - Launch an interactive shell in the repository directory
       - `c` - Commit changes (prompts for a commit message)
       - `s` - Skip this repository and continue with the next one
       - `q` - Quit the sync process entirely

   - **Help**: Display help information:

     ```bash
     git-compose --help
     ```

   - **Verbose Output**: Enable detailed output for debugging:

     ```bash
     git-compose build --verbose
     ```

4. **Process Repositories**: The tool will clone or checkout the specified branches of the repositories into the target directory.

### Target Directory Configuration

The target directory can be specified in two ways:

1. **In configuration file**: Define `target` in your `.git-compose.yaml` file
2. **Command line option**: Use `--target <path>` to override the config file target

**Important**: If no target is specified in the config file and `--target` option is not provided, the tool will display an error message and exit.

The `--target` option takes precedence over the config file target when both are present.

### Path Format Compatibility

`git-compose` automatically detects path format incompatibilities between different operating systems:

- **Windows paths** (e.g., `C:\work\projects\test`)
- **Unix/Linux paths** (e.g., `/c/work/projects/test`)

**Default behavior**: If an incompatible path format is detected, the tool will display an error message and exit, suggesting to use the `--convert-paths` option.

**With `--convert-paths`**: The tool will automatically convert paths between formats and display a warning message showing the conversion.

### Example Configuration

**New format (recommended):**
```yaml
target: c:/work/projects/test-git-compose

repos:
  - path: .
    branch: develop
    origin: https://github.com/PIC16B/git-practice.git
  - path: dir1/dir2/here
    branch: some-other-branch
    origin: https://github.com/PIC16B/git-practice.git
  - path: dir3/dir4/there
    branch: main
    origin: https://github.com/CodeupClassroom/practice-git.git
```

**Legacy format (still supported):**
```yaml
target: c:/work/projects/test-git-compose

some-root-repo:
  path: .
  branch: develop
  origin: https://github.com/PIC16B/git-practice.git
other-repo:
  path: dir1/dir2/here
  branch: some-other-branch
  origin: https://github.com/PIC16B/git-practice.git
third-repo:
  path: dir3/dir4/there
  branch: main
  origin: https://github.com/CodeupClassroom/practice-git.git
```

Both configuration formats will clone the specified repositories into the target directory and checkout the specified branches. The new format using `repos:` array is recommended for better organization and consistency.

### Examples

**Basic usage with default config:**
```bash
git-compose build
```

**Show repository status:**
```bash
git-compose status
```

**Use custom config file:**
```bash
git-compose --config ./my-config.yaml build
```

**Rebuild all repositories (delete and re-clone):**
```bash
git-compose build --rebuild
```

**Shallow clone for faster setup:**
```bash
git-compose build --shallow
```

**Execute a command in all repositories:**
```bash
git-compose exec "git status"
git-compose exec "npm install"
```

**Interactive commit across all repositories:**
```bash
git-compose commit
```

**Add existing Git repository to configuration:**
```bash
# Add current directory
git-compose add .

# Add specific repository path
git-compose add ./frontend

# Add with verbose output
git-compose add ./backend --verbose
```

**Use with path conversion (cross-platform):**
```bash
git-compose build --convert-paths --target /c/work/projects/my-workspace
```

**Verbose output for debugging:**
```bash
git-compose build --verbose
```

**Extract subdirectory to new repository:**
```bash
# Basic extraction
git-compose extract /path/to/source/repo /path/to/source/repo/module

# With dry run first
git-compose extract /path/to/source/repo /path/to/source/repo/module --dry-run

# Extract and create GitHub repository
git-compose extract /path/to/source/repo /path/to/source/repo/module \
  --init-remote git@github.com:user/module.git --push

# Extract specific branch
git-compose extract /path/to/source/repo /path/to/source/repo/module \
  --branch feature-branch --verbose
```
