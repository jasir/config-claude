# Troubleshooting

Řešení běžných problémů s **git-composer**.

## Instalační problémy

### Bun není nalezen

**Problém:**
```
command not found: bun
```

**Řešení:**
```bash
# Instalace bun
curl -fsSL https://bun.sh/install | bash

# Přidání do PATH
echo 'export PATH="$HOME/.bun/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc

# Ověření
bun --version
```

### Permission denied při vytváření symbolického odkazu

**Problém:**
```
ln: failed to create symbolic link '/usr/local/bin/git-compose': Permission denied
```

**Řešení 1:** Použijte sudo
```bash
sudo ln -s /path/to/git-composer/git-compose /usr/local/bin/git-compose
```

**Řešení 2:** Vytvořte lokální bin adresář
```bash
mkdir -p ~/bin
ln -s /path/to/git-composer/git-compose ~/bin/git-compose
export PATH="$HOME/bin:$PATH"
```

### Dependencies se nenainstalují

**Problém:**
```
error: failed to install dependencies
```

**Řešení:**
```bash
# Vyčistit cache a reinstalovat
rm -rf node_modules
rm bun.lockb
bun install

# Pokud stále nefunguje, zkuste npm
npm install
```

## Build problémy

### Target directory není specifikován

**Problém:**
```
Error: Target directory not specified
```

**Řešení:**

Přidejte target do `.git-compose.yaml`:
```yaml
target: /path/to/workspace
repos:
  - path: .
    branch: main
    origin: https://github.com/user/repo.git
```

Nebo použijte `--target` option:
```bash
git-compose build --target /path/to/workspace
```

### Nekompatibilní formát cest

**Problém:**
```
Error: Incompatible path format detected
```

**Příklad chyby:**
- Config má Windows cestu `C:\work\projects`, ale běžíte na Linux/macOS
- Config má Unix cestu `/c/work/projects`, ale běžíte na Windows

**Řešení:**

Použijte `--convert-paths` option:
```bash
git-compose build --convert-paths
```

Nebo aktualizujte config soubor na správný formát pro vaši platformu:
```yaml
# Linux/macOS
target: /c/work/projects/workspace

# Windows
target: C:/work/projects/workspace
```

### Git clone selhává

**Problém:**
```
fatal: could not read Username for 'https://github.com'
```

**Řešení:**

**Option 1:** Použijte SSH URL místo HTTPS
```yaml
repos:
  - path: .
    branch: main
    origin: git@github.com:user/repo.git  # místo https://
```

**Option 2:** Nastavte Git credentials
```bash
git config --global credential.helper store
```

**Option 3:** Použijte GitHub Personal Access Token
```bash
git config --global credential.helper cache
```

### Repozitář již existuje

**Problém:**
```
Repository already exists at path
```

**Řešení:**

**Option 1:** Použijte `--rebuild` pro smazání a znovu naklonování
```bash
git-compose build --rebuild
```

**Option 2:** Ručně smažte .git adresář
```bash
rm -rf /path/to/repo/.git
git-compose build
```

## Exec problémy

### Příkaz selhal v některých repozitářích

**Problém:**
```
Command failed in repository: frontend
```

**Řešení:**

**Option 1:** Použijte `--verbose` pro detailní výstup
```bash
git-compose exec "npm install" --verbose
```

**Option 2:** Spusťte příkaz manuálně v problematickém repozitáři
```bash
cd /path/to/workspace/frontend
npm install
```

**Option 3:** Zkontrolujte, zda je příkaz dostupný
```bash
git-compose exec "which npm"
```

## Extract problémy

### git-filter-repo není nainstalován

**Problém:**
```
Error: git-filter-repo not found
```

**Řešení:**
```bash
# Ubuntu/Debian
sudo apt install git-filter-repo

# macOS
brew install git-filter-repo

# Nebo pomocí pip
pip3 install git-filter-repo
```

### Target directory již obsahuje .git

**Problém:**
```
Error: Target directory already contains .git
```

**Řešení:**

**Option 1:** Použijte `--force` pro přepsání
```bash
git-compose extract /source /target --force
```

**Option 2:** Ručně smažte .git
```bash
rm -rf /target/.git
git-compose extract /source /target
```

### GitHub remote již existuje

**Problém:**
```
Repository already exists on GitHub
```

**Řešení:**

To není chyba! `--init-remote` automaticky použije existující repozitář:
```bash
git-compose extract /source /target \
  --init-remote user/existing-repo --push
```

Pokud chcete vytvořit nový repozitář, nejprve ho smažte na GitHubu nebo použijte jiný název.

## Commit/Sync problémy

### Uncommitted změny blokují sync

**Problém:**
```
Repository has uncommitted changes
```

**Řešení:**

**Option 1:** Použijte interaktivní menu pro commit
```bash
git-compose sync
# Vyberte 'c' pro commit nebo 's' pro skip
```

**Option 2:** Použijte `--no-commit` pro automatické přeskočení
```bash
git-compose sync --no-commit
```

**Option 3:** Commitněte manuálně
```bash
cd /path/to/repo
git add .
git commit -m "Your message"
```

### Push selhal - není nastavený remote

**Problém:**
```
fatal: No configured push destination
```

**Řešení:**

Nastavte remote origin:
```bash
cd /path/to/repo
git remote add origin git@github.com:user/repo.git
```

Nebo aktualizujte config soubor:
```yaml
repos:
  - path: problematic-repo
    branch: main
    origin: git@github.com:user/repo.git
```

### Pull selhal - diverged branches

**Problém:**
```
fatal: Need to specify how to reconcile divergent branches
```

**Řešení:**

git-compose používá rebase, ale pokud máte konflikt:

**Option 1:** Vyřešte manuálně
```bash
cd /path/to/repo
git pull --rebase origin main
# Vyřešte konflikty
git rebase --continue
```

**Option 2:** Reset na remote
```bash
cd /path/to/repo
git reset --hard origin/main
```

## Add/Discover problémy

### Not a git repository

**Problém:**
```
Error: Not a git repository
```

**Řešení:**

Ujistěte se, že adresář obsahuje Git repozitář:
```bash
cd /path/to/repo
git status

# Pokud není Git repo, inicializujte ho
git init
```

### No remote origin found

**Problém:**
```
Warning: No remote origin found for repository
```

**Řešení:**

Přidejte remote origin:
```bash
cd /path/to/repo
git remote add origin git@github.com:user/repo.git
```

### Repository already in config

**Problém:**
```
Warning: Repository already exists in configuration
```

**Řešení:**

To není chyba - git-compose automaticky detekuje duplicity a přeskočí je.

Pokud chcete přidat stejný repozitář pod jinou cestu, je to OK - každá cesta je unikátní záznam.

## Path problémy

### Relative path resolution

**Problém:**
Cesty se nepřekládají správně.

**Řešení:**

**Option 1:** Použijte absolutní cesty
```bash
git-compose add /absolute/path/to/repo
```

**Option 2:** Použijte `--absolute` flag
```bash
git-compose add ./repo --absolute
```

### Working directory preservation

**Problém:**
git-compose nevidí původní working directory.

**Řešení:**

Wrapper skript `./git-compose` automaticky ukládá `ORIGINAL_CWD`.

Pokud používáte symlink, ujistěte se, že wrapper skript se spouští:
```bash
# Ověřte
which git-compose
cat $(which git-compose)
```

## Performance problémy

### Build je příliš pomalý

**Řešení:**

**Option 1:** Použijte shallow clone
```bash
git-compose build --shallow
```

**Option 2:** Clone paralelně (manuálně)
```bash
# Spusťte build na pozadí pro každý repo
# (příští verze může toto automatizovat)
```

### Exec je pomalý pro mnoho repozitářů

**Řešení:**

Aktuálně se příkazy spouští sekvenčně. Pro paralelní spuštění:
```bash
# Použijte GNU parallel nebo xargs
cat .git-compose.yaml | yq '.repos[].path' | \
  parallel "cd {} && your-command"
```

## Config problémy

### YAML parsing error

**Problém:**
```
Error: Invalid YAML syntax
```

**Řešení:**

Ověřte syntaxi:
```bash
# Použijte yq nebo Python
yq . .git-compose.yaml

# Nebo
python3 -c "import yaml; yaml.safe_load(open('.git-compose.yaml'))"
```

Běžné chyby:
- Špatná indentace (použijte 2 mezery)
- Chybějící dvojtečky
- Speciální znaky v cestách (použijte uvozovky)

### Legacy vs new format

**Problém:**
Nejste si jisti, který formát použít.

**Řešení:**

Oba jsou podporovány! Doporučujeme nový:

```yaml
# ✅ Doporučený (nový)
repos:
  - path: .
    branch: main
    origin: url

# ✅ Stále funguje (starší)
repo-name:
  path: .
  branch: main
  origin: url
```

## Obecné debugging tipy

### Zapněte verbose mode

```bash
git-compose --verbose <command>
```

### Zkontrolujte Git konfiguraci

```bash
git config --list
git remote -v
git status
```

### Použijte dry-run (kde je dostupné)

```bash
git-compose extract /source /target --dry-run
```

### Zkontrolujte permissions

```bash
ls -la /path/to/workspace
ls -la /path/to/git-composer
```

### Ověřte environment

```bash
echo $PATH
echo $ORIGINAL_CWD
which git
which bun
```

## Stále máte problém?

1. **Zkontrolujte [Usage dokumentaci](usage.md)** pro správnou syntaxi
2. **Hledejte v [GitHub Issues](https://github.com/jasir/git-composer/issues)**
3. **Vytvořte nové issue** s:
   - Detailním popisem problému
   - Výstupem `git-compose --verbose <command>`
   - Vaší konfigurací (bez citlivých dat)
   - Informacemi o prostředí (OS, bun version, git version)

## Běžné error messages reference

| Error | Příčina | Řešení |
|-------|---------|--------|
| `Target directory not specified` | Chybí target v config nebo --target | Přidat target do config nebo použít --target |
| `Incompatible path format` | Windows/Unix path mismatch | Použít --convert-paths |
| `Repository already exists` | .git již existuje | Použít --rebuild nebo smazat .git |
| `Not a git repository` | Adresář není Git repo | git init nebo zkontrolovat cestu |
| `No remote origin found` | Repozitář nemá origin | git remote add origin <url> |
| `Command failed` | Příkaz selhal v exec | Použít --verbose a zkontrolovat |
| `git-filter-repo not found` | Chybí dependency pro extract | Instalovat git-filter-repo |